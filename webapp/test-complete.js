#!/usr/bin/env node

const fetch = require('node-fetch');

async function runCompleteTests() {
    console.log('üß™ Ejecutando tests completos de integraci√≥n Bot-Webapp...\n');

    const baseUrl = 'http://localhost:3000';
    const telegramId = 123456789;

    try {
        // Test 1: Verificar conexi√≥n con la webapp
        console.log('1Ô∏è‚É£ Verificando conexi√≥n con la webapp...');
        const healthResponse = await fetch(`${baseUrl}/`);
        if (healthResponse.ok) {
            console.log('‚úÖ Webapp respondiendo correctamente en puerto 3000');
        } else {
            console.log('‚ùå Error conectando con webapp');
            return;
        }

        // Test 2: Verificar API de alertas (GET)
        console.log('\n2Ô∏è‚É£ Verificando endpoint GET de alertas...');
        const getResponse = await fetch(`${baseUrl}/api/bot-alerts?telegramId=${telegramId}`);
        const getData = await getResponse.json();
        
        if (getResponse.ok) {
            console.log(`‚úÖ GET API funciona - Alertas existentes: ${getData.alerts?.length || 0}`);
        } else {
            console.log('‚ùå Error en GET API:', getData.error);
        }

        // Test 3: Crear m√∫ltiples alertas de prueba
        console.log('\n3Ô∏è‚É£ Creando alertas de prueba...');
        
        const testAlerts = [
            {
                telegramId: telegramId,
                origin: 'BOG',
                destination: 'MIA',
                maxPrice: 450,
                currency: 'USD',
                adults: 2,
                children: 1,
                infants: 0,
                alertType: 'MONTHLY',
                isActive: true,
                isPaused: false
            },
            {
                telegramId: telegramId,
                origin: 'MAD',
                destination: 'EZE',
                maxPrice: 600,
                currency: 'USD',
                departureDate: '2025-08-15',
                adults: 1,
                children: 0,
                infants: 0,
                alertType: 'SPECIFIC',
                isActive: true,
                isPaused: false
            }
        ];

        for (let i = 0; i < testAlerts.length; i++) {
            const alert = testAlerts[i];
            console.log(`   üìù Creando alerta ${i + 1}: ${alert.origin} ‚Üí ${alert.destination}`);
            
            const createResponse = await fetch(`${baseUrl}/api/bot-alerts`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(alert),
            });

            const createData = await createResponse.json();
            
            if (createResponse.ok) {
                console.log(`   ‚úÖ Alerta ${i + 1} creada - ID: ${createData.alert?.id}`);
            } else {
                console.log(`   ‚ùå Error creando alerta ${i + 1}:`, createData.error);
            }
        }

        // Test 4: Verificar alertas en base de datos
        console.log('\n4Ô∏è‚É£ Verificando alertas guardadas...');
        const verifyResponse = await fetch(`${baseUrl}/api/bot-alerts?telegramId=${telegramId}`);
        const verifyData = await verifyResponse.json();
        
        if (verifyResponse.ok && verifyData.alerts) {
            console.log(`‚úÖ Alertas en DB: ${verifyData.alerts.length}`);
            
            verifyData.alerts.forEach((alert, index) => {
                console.log(`   üìã Alerta ${index + 1}: ${alert.origin} ‚Üí ${alert.destination} | $${alert.maxPrice} | Activa: ${alert.isActive ? 'S√≠' : 'No'}`);
            });
        } else {
            console.log('‚ùå Error verificando alertas guardadas');
        }

        // Test 5: Verificar dashboard
        console.log('\n5Ô∏è‚É£ Verificando p√°ginas web...');
        const dashboardResponse = await fetch(`${baseUrl}/dashboard`);
        if (dashboardResponse.ok) {
            console.log('‚úÖ Dashboard accesible');
        } else {
            console.log('‚ùå Error accediendo al dashboard');
        }

        const newAlertResponse = await fetch(`${baseUrl}/alerts/new`);
        if (newAlertResponse.ok) {
            console.log('‚úÖ P√°gina de nueva alerta accesible');
        } else {
            console.log('‚ùå Error accediendo a p√°gina de nueva alerta');
        }

        // Test 6: Verificar bot de Telegram (si est√° ejecut√°ndose)
        console.log('\n6Ô∏è‚É£ Verificando estado del bot de Telegram...');
        console.log('‚ÑπÔ∏è  El bot debe estar ejecut√°ndose en otra terminal');
        console.log('‚ÑπÔ∏è  Revisa la terminal del bot para ver si est√° activo');

        console.log('\nüéâ Tests de integraci√≥n completados exitosamente!');
        console.log('\nüìã Resumen de la integraci√≥n:');
        console.log('   ‚úÖ Webapp ejecut√°ndose en http://localhost:3000');
        console.log('   ‚úÖ API de alertas funcionando');
        console.log('   ‚úÖ Base de datos SQLite conectada');
        console.log('   ‚úÖ Creaci√≥n y lectura de alertas exitosa');
        console.log('   ‚úÖ P√°ginas web accesibles');
        console.log('\nüí° Pr√≥ximos pasos:');
        console.log('   ‚Ä¢ Probar crear alertas desde la interfaz web');
        console.log('   ‚Ä¢ Verificar que las alertas aparezcan en el dashboard');
        console.log('   ‚Ä¢ Probar comandos del bot de Telegram');
        
    } catch (error) {
        console.error('‚ùå Error durante los tests:', error.message);
    }
}

// Ejecutar tests
runCompleteTests();
